#!/usr/bin/env node
/**
 * Module dependencies.
 */

var migrate = require('../')
    , join = require('path').join
    , fs = require('fs')
    , path = require('path')
    , _ = require('lodash');
const chalk = require('chalk');
var readLine = require('readline');
var set;
var arg;

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Option defaults.
 */

var options = {
    args: [],
    isProdEnvironment: true,
    force: false,
    redoFile: null,
    seedAfterMigrate: false,
    seedOnly: false,
    seedFiles: [],
    template: [
        '\'use strict\';'
        , ''
        , 'var fs = require(\'fs\');'
        , 'var mysql = require(\'mysql\');'
        , 'var db = require(\'./db.js\');'
        , ''
        , 'exports.up = function(next) {'
        , '    db.query(fs.readFileSync(\'./migrations/sql/%file%.up.sql\').toString(), function(err, result) {'
        , '        if (err) {'
        , '            console.log(err);'
        , '        }'
        , '        next();'
        , '    });'
        , '};'
        , ''
        , 'exports.down = function(next) {'
        , '    db.query(fs.readFileSync(\'./migrations/sql/%file%.down.sql\').toString(), function(err, result) {'
        , '        if (err) {'
        , '            console.log(err);'
        , '        }'
        , '        next();'
        , '    });'
        , '};'
        , '%seedStatement%'
    ].join('\n'),
    templateSeedOnly: [
        '\'use strict\';'
        , ''
        , 'exports.up = function(next) {'
        , '    next();'
        , '};'
        , ''
        , 'exports.down = function(next) {'
        , '    next();'
        , '};'
        , '%seedStatement%'
    ].join('\n')
};

try {
    options.isProdEnvironment = _.get(require(join(path.resolve('lib'), 'config.js')), 'client.host', 'client.mobilea.nl') === 'client.mobilea.nl';
} catch (err) {
    options.isProdEnvironment = true;
}

// parse arguments

while (args.length) {
    arg = args.shift();
    switch (true) {
        case arg.match(/^(\?|-h|--help|help)$/i) !== null:
            showHelp();
            break;
        case arg.match(/^(-c|--chdir)$/i) != null:
            process.chdir(required());
            break;
        case arg.match(/^--state-file$/i) !== null:
            options.stateFile = required();
            break;
        case arg.match(/^--template-file$/i) !== null:
            options.template = fs.readFileSync(required());
            break;
        case arg.match(/^(-s|--seed)$/i) !== null:
            options.seedAfterMigrate = true;
            break;
        case arg.match(/^(-so|--seed-only)$/i) !== null:
            options.seedOnly = true;
            options.seedAfterMigrate = true;
            break;
        case arg.match(/^(-f|--force)$/i) !== null:
            options.force = true;
            break;
        case arg.match(/^\d+.*\.js$/i) !== null:
            options.file = options.file || arg.match(/^\d+.*\.js$/i)[0];
            break;
        case arg.match(/^\d+-.*\.json$/i) !== null:
            options.seedFiles.push(path.join(path.resolve('migrations'), 'seeder', 'data', arg.match(/^\d+-.*\.json$/i)[0]));
            break;
        case arg.match(/^(up|down|seed|redo|list)$/i) !== null:
            options.command = arg.match(/^(up|down|seed|redo|list)$/i)[1].toLowerCase();
            if (options.command === 'seed') {
                var seedFile = required();
                if (seedFile.match(/^\d+-.*\.json$/i)) {
                    options.seedFiles.push(path.join(path.resolve('migrations'), 'seeder', 'data', seedFile.match(/^\d+-.*\.json$/i)[0]));
                } else {
                    options.seedFiles.push(seedFile);
                }
            }
            break;
        default:
            if (options.command) {
                options.args.push(arg);
            } else {
                options.command = arg;
            }
            break;
    }
}

// set the defaults if not passed in...
if (!options.command) {
    options.command = 'up';
    options.force = true;
}
options.stateFile = options.stateFile || join('migrations', '.migrate');

// create ./migrations directories
try {
    fs.mkdirSync('migrations', 0774);
} catch (err) {
    // ignore
}
try {
    fs.mkdirSync('migrations/seeder', 0774);
} catch (err) {
    // ignore
}
try {
    fs.mkdirSync('migrations/seeder/data', 0774);
} catch (err) {
    // ignore
}
try {
    fs.mkdirSync('migrations/sql', 0774);
} catch (err) {
    // ignore
}

if (~['up', 'down', 'redo', 'list'].indexOf(options.command)) {
    try {
        set = migrate.load(options.stateFile, 'migrations');
        console.log(chalk.bgRed('step1'));
        if (!set.migrations || set.migrations.length === 0) {
            abort('There are no migrations found! Create a new migration first by using: \'migrate create\'');
        }
        console.log(chalk.bgRed('step2'));
        set.on('migration', function(migration, direction, seedFiles) {
            log(direction, migration.title);
            if (direction === 'up' && seedFiles) {
                if (!_.isArray(seedFiles)) {
                    seedFiles = [seedFiles];
                }
                _.forEach(seedFiles, function(seedFile) {
                    if (!_.includes(options.seedFiles, seedFile)) {
                        options.seedFiles.push(path.join(path.resolve('migrations'), 'seeder', 'data', seedFile));
                    }
                });
            }
        });
        
        console.log(chalk.bgRed('step3'));
        if (options.command === 'redo' && set.migrations.length > 0) {
            options.redoFile = set.migrations[set.pos - 1].title
        }
        console.log(chalk.bgRed('step4'));
        // check if the specified file is a valid file in the migration set.
        if (options.file) {
            if (!_.find(set.migrations, function(migration) {
                    return migration.title.toLowerCase() === options.file.toLowerCase()
                })) {
                console.log(chalk.bgRed('The migration file: \'' + options.file + '\', that was specified, is not valid! You will be prompted to select a file manually'));
                options.file = null;
            }
        }
        console.log(chalk.bgRed('step5'));
    } catch (e) {
        abort('Unable to initialize migrations -> Exiting!');
    }
}

switch (options.command) {
    case 'up':
    case 'down':
    case 'redo':
        if (options.command !== 'up') {
            abortOnProd();
        }
        if (options.file) {
            handleSelectedFile(options.file, options.redoFile);
        } else {
            selectFile(handleSelectedFile);
        }
        break;
    case 'list':
        showList();
        break;
    case 'seed':
        doSeed();
        break;
    case 'create':
        create.apply(this, options.args);
        break;
    default:
        abort('unknown command "' + options.command + '"');
        break;
}

// Private functions below

// require an argument

function required() {
    if (args.length) {
        return args.shift();
    }
    abort(arg + ' requires an argument');
}

// abort with a message

function abort(msg) {
    console.log(chalk.bgRed(msg));
    process.exit(1);
}

function doSeed() {
    if (!options.seedFiles.length) {
        console.log(chalk.bgRed('No seed files were specified! Nothing to seed...'));
        process.exit();
    }
    console.log(chalk.bold('Start seeding...'));
    require(path.join(path.resolve('migrations'), 'seeder', 'seed.js'))(options.seedFiles, function() {
        console.log(chalk.green('Seeding finished!'));
        process.exit();
    });
}

function showList() {
    for (var i = 0; i < set.migrations.length; i++) {
        console.log(chalk.bold(_.padStart(i + 1, 6, ' ')) + ': ' + set.migrations[i].title + ' (' + (set.pos - 1 >= i ? chalk.green('processed') : chalk.red('not processed yet')) + ')');
    }
    process.exit();
}

function handleSelectedFile(file, redoFile) {
    if (file) {
        doMigration(file, redoFile);
    }
    else {
        abort('No valid migration file found! Migrate cannot continue -> exiting!');
    }
}

function doMigration(file, redoFile) {
    var migrationCallback = function(err) {
        if (err) {
            throw err;
        }
        console.log(chalk.green('Migration completed!'));
        if (options.seedAfterMigrate) {
            doSeed();
        } else {
            if (options.seedFiles.length) {
                console.log(chalk.bgRed('Unprocessed Seed files were detected but --seed flag was not found!'));
                console.log(chalk.bold('To process the seed files you can either do a \'migrate down\' followed by a \'migrate up -s\''));
                console.log(chalk.bold('Or execute the following command:'));
                var seedFiles = [];
                _.forEach(options.seedFiles, function(seedFile) {
                    var match = seedFile.match(/(\\|\/)((\d+)-.*\.json)/i);
                    seedFiles.push(match ? match[2] : seedFile);
                });
                console.log(chalk.green(chalk.bold('migrate seed ' + seedFiles.join(' '))));
            }
            process.exit();
        }
    };

    switch (options.command) {
        case 'redo':
            console.log(chalk.bold('Migrating down 2 and including: ' + file));
            set.down(file, function(err) {
                if (err) {
                    throw err;
                }
                console.log(chalk.bold('Migrating up 2 and including: ' + redoFile));
                set.up(redoFile, migrationCallback)
            });
            break;
        case 'up':
            console.log(chalk.bold('Migrating up 2 and including: ' + file));
            set.up(file, migrationCallback);
            break;
        case 'down':
            console.log(chalk.bold('Migrating down 2 and including: ' + file));
            set.down(file, migrationCallback);
            break;
        default:
            abort('doMigration() Unknown command!');
            break;
    }
}

function abortOnProd() {
    if (options.isProdEnvironment) {
        abort('Command: \'' + chalk.bold(options.command) + '\' is not allowed in a PRODUCTION environment!');
    }
}

function selectFile(callback) {
    if ((options.command === 'up' && set.pos === set.migrations.length) || options.command === 'down' && set.pos === 0) {
        console.log(chalk.red('You are up-2-date! There is nothing to migrate \'' + chalk.bold(options.command) + '\' 2!'));
        process.exit();
    }
    if (options.force) {
        switch (options.command) {
            case 'up':
                callback(set.migrations[set.migrations.length - 1].title, options.redoFile);
                return;
            case 'down':
            case 'redo':
                callback(set.migrations[0].title, options.redoFile);
                return;
        }
    }

    var counter = 0;
    var files = {};
    switch (options.command) {
        case 'up':
            if (set.pos + 1 === set.migrations.length) {
                callback(set.migrations[set.migrations.length - 1].title);
                return;
            }
            console.log(chalk.bold('Available migrations to migrate \'up\' 2:'));
            for (var up = set.pos + 1; up <= set.migrations.length; up++) {
                files[++counter] = set.migrations[up - 1].title;
                console.log(chalk.bold(_.padStart(counter, 6, ' ')) + ': ' + chalk.dim(set.migrations[up - 1].title));
            }
            break;
        case 'down':
            if (set.pos - 1 === 0) {
                callback(set.migrations[0].title);
                return;
            }
            console.log(chalk.bold('Available migrations to migrate \'down\' 2:'));
            for (var down = 0; down < set.pos; down++) {
                files[++counter] = set.migrations[down].title;
                console.log(chalk.bold(_.padStart(counter, 6, ' ')) + ': ' + chalk.dim(set.migrations[down].title));
            }
            break;
        case 'redo':
            console.log(chalk.bold('Migrations that can be re-done:'));
            for (var redo = 0; redo < set.pos; redo++) {
                files[++counter] = set.migrations[redo].title;
                console.log(chalk.bold(_.padStart(counter, 6, ' ')) + ': ' + chalk.dim(set.migrations[redo].title));
            }
            break;
    }

    function ask() {
        var rl = readLine.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.question('Please enter the number of the migration or type \'q(uit)\' to exit: ',
            function(answer) {
                rl.close();
                if (answer.match(/^q(uit)*$/i)) {
                    process.exit();
                }
                answer = answer.match(/^\d+$/);
                if (answer && files.hasOwnProperty(answer)) {
                    callback(files[answer], options.redoFile);
                } else {
                    ask();
                }
            });
    }

    ask();
}

/**
 * Log a keyed message.
 */
function log(key, msg) {
    console.log(chalk.bold(key) + ' : ' + chalk.cyan(msg));
}

/**
 * Slugify the given `str`.
 */
function slugify(str) {
    return str.replace(/\s+/g, '-');
}

/**
 * Create a migration with the given `name`.
 *
 */

function create() {
    var curr = Date.now()
        , title = slugify([].slice.call(arguments).join(' '));

    getUniqueTemplateName(title, function(templateName) {
        title = title ? curr + '-' + title : curr;
        var filePath = join(path.resolve('migrations'), title + '.js');
        var template = options.seedOnly ? options.templateSeedOnly : options.template;
        log('create', filePath);
        template = template.replace(/%file%/g, templateName);
        var comment = '\n/*\n * Specify only file names. Files are expected to reside in the directory ./migrations/seeder/data/\n */\n';
        template = template.replace(/%seedStatement%/g, comment + (options.seedAfterMigrate ? 'exports.seedFiles = [\'' + title + '.json\'];\n' : 'exports.seedFiles = [];\n'));
        fs.writeFileSync(filePath, template);
        if (!options.seedOnly) {
            fs.writeFileSync(join(path.resolve('migrations'), 'sql', templateName + '.up.sql'), '# PLACE YOUR \'UP\' MIGRATION SQL HERE!');
            fs.writeFileSync(join(path.resolve('migrations'), 'sql', templateName + '.down.sql'), '# PLACE YOUR \'DOWN\' MIGRATION SQL HERE!');
        }
        if (options.seedAfterMigrate) {
            fs.writeFileSync(join(path.resolve('migrations'), 'seeder', 'data', title + '.json'), '{}');
        }
    });
}

function getUniqueTemplateName(fileName, done) {
    var check = function(checkCounter, callBack) {
        var name = fileName + (checkCounter > 0 ? ' (' + checkCounter + ')' : '');
        fs.stat(join('migrations', 'sql', name + '.up.sql'), function(err) {
            if (err == null) {
                callBack(null, checkCounter)
            } else if (err.code == 'ENOENT') {
                callBack(name, checkCounter);
            } else {
                abort('Error getting unique fileName: ' + err.code);
            }
        });
    };

    check(0, function lambda(uniqueName, counter) {
        if (uniqueName) {
            done(uniqueName);
        } else {
            if (++counter < 100) {
                check(counter, lambda);
            } else {
                abort('Recursion limit: Unique templateName for SQL-files could not be determined!')
            }
        }
    });
}

function showHelp() {
    console.log(chalk.bold(_.repeat('*', 100)));
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* Execute: ') + 'migrate ' + chalk.cyan('[' + 'command' + chalk.bold('=\'') + chalk.green('up') + chalk.bold('\'') + '] [filename] [options]') + ' ');
    console.log(chalk.bold('* ') + '');
    console.log(chalk.bold('* ') + chalk.bold('Command:'));
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* ') + ' up     [name]     migrate up till given migration (the default command)');
    console.log(chalk.bold('* ') + ' down   [name]     migrate down till given migration');
    console.log(chalk.bold('* ') + ' create [name]     create a new migration. Will also create .sql files to put the actual migration scripts in.');
    console.log(chalk.bold('* ') + ' redo   [name]     migrate down till given migration and back up again to where it migrated down from.');
    console.log(chalk.bold('* ') + ' list              shows all available migrations and their current processing state.');
    console.log(chalk.bold('* ') + ' seed   [name...]  using \'seed\' as a command results in ' + chalk.bold('\'seeding\'') + ' only.');
    console.log(chalk.bold('* ') + '                   You need to specify at least 1 file to seed!');
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* name: ') + 'This is the filename of the migration.');
    console.log(chalk.bold('* ') + '      When the ' + chalk.bold('filename') + ' is omitted and there is more than 1 file available, you will be');
    console.log(chalk.bold('* ') + '      asked to select a file from a list.');
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* Options: '));
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* ') + ' -c, --chdir     <path>  change the working directory');
    console.log(chalk.bold('* ') + ' --state-file    <path>  set path to state file (migrations/.migrate)');
    console.log(chalk.bold('* ') + ' --template-file <path>  set path to template file to use for new migrations');
    console.log(chalk.bold('* ') + ' -f, --force             passing this option asks no questions and goes all the way up or down!');
    console.log(chalk.bold('* ') + ' -s, --seed              using \'seed\' as an option will perform ' + chalk.bold('\'seeding\'') + ' when ' + chalk.bold('\'migrating\'') + ' has finished!)');
    console.log(chalk.bold('* ') + '                         when specified in conjunction with the ' + chalk.bold('\'create\'') + ' command, an empty seed file will also be created!)');
    console.log(chalk.bold('* ') + ' -so, --seed-only        only valid with the ' + chalk.bold('\'create\'') + ' command. Will create an empty seed file and no migration files');
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* Some examples:'));
    console.log(chalk.bold('* '));
    console.log(chalk.bold('* ') + chalk.bold('migrate') + '             Will perform an incremental migrate ' + chalk.bold('up') + ' if there is only 1 migration, when');
    console.log(chalk.bold('* ') + '                    there are more files to migrate, you will be prompted to select a file');
    console.log(chalk.bold('* ') + '                    to migrate to.');
    console.log(chalk.bold('* ') + chalk.bold('migrate up -f') + '       Will perform an incremental migrate ' + chalk.bold('up') + ' to the last available migration file.');
    console.log(chalk.bold('* ') + chalk.bold('migrate down') + '        Will ask you to which point in time you want to perform a migrate ' + chalk.bold('down') + ' to.');
    console.log(chalk.bold('* ') + chalk.bold('migrate down 1316027432511-add-pets.js'));
    console.log(chalk.bold('* ') + '                    Will migrate down to and including the given filename.');
    console.log(chalk.bold('* ') + chalk.bold('migrate down -f') + '     Will perform a full migrate ' + chalk.bold('down') + chalk.red.bold(' clearing the entire') + ' database.');
    console.log(chalk.bold('* ') + chalk.bold('migrate redo -f -s') + '  Will perform a full migrate ' + chalk.bold('down') + ' and ' + chalk.bold('up') + ' and will ' + chalk.bold('seed') + ' afterwards.');
    console.log(chalk.bold(_.repeat('*', 100)));
    process.exit();
}
